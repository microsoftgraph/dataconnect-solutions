{
	"name": "BronzeToSilver",
	"properties": {
		"folder": {
			"name": "Stage3 BronzeToSilver"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synspgdcscin",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "88e5f1c5-0e41-4cc7-8041-23da8cee610c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2058f82f-b8ac-423e-8c83-227732887c3a/resourceGroups/fractal-neal-coe-dev-rg/providers/Microsoft.Synapse/workspaces/syngdcscindevil/bigDataPools/synspgdcscin",
				"name": "synspgdcscin",
				"type": "Spark",
				"endpoint": "https://syngdcscindevil.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synspgdcscin",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import all the libraries needed"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, explode, collect_list, concat_ws, udf, expr, regexp_replace,array_contains\r\n",
					"from datetime import datetime\r\n",
					"from pyspark.sql import functions as F\r\n",
					"import json\r\n",
					"import adal\r\n",
					"import pyodbc\r\n",
					"import struct\r\n",
					"import os\r\n",
					"import pandas as pd"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## calling variable file to intitialize the variables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run config/variables"
				],
				"execution_count": 29
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Set global constants"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"input_container = \"bronze\"\r\n",
					"output_container = \"silver\"\r\n",
					"cloud_alias = \"SFSC\""
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Generate input and utput container URL's"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"input_url = f'abfss://{input_container}@{adls_name}.dfs.core.windows.net/{cloud_alias}'\r\n",
					"output_url = f'abfss://{output_container}@{adls_name}.dfs.core.windows.net/{cloud_alias}'"
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create connection to database and set the cursor"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"conn = pyodbc.connect(connString, attrs_before = { SQL_COPT_SS_ACCESS_TOKEN:tokenstruct});\r\n",
					"cursor = conn.cursor()"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get all entities"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entities = mssparkutils.fs.ls(input_url)\r\n",
					"\r\n",
					"for entity in entities:\r\n",
					"    entity_name = os.path.splitext(entity.name)[0]\r\n",
					"    print(entity_name)"
				],
				"execution_count": 35
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Read CSV and save dataframe in delta format at desired location"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"for entity in entities:\r\n",
					"    entity_name = os.path.splitext(entity.name)[0]\r\n",
					"\r\n",
					"    watermark = cursor.execute(f\"SELECT [SilverWatermark] FROM [dbo].[MetadataSalesCloud] WHERE [EntityName] = '{entity_name}' AND [CloudAbbreviation] = '{cloud_alias}'\") \\\r\n",
					"                .fetchall()\r\n",
					"\r\n",
					"    print(entity_name)\r\n",
					"    watermark = watermark[0][0]\r\n",
					"    print('LastTimestamp:', watermark)\r\n",
					"\r\n",
					"\r\n",
					"    try:\r\n",
					"        df = spark.read.format('delta')\\\r\n",
					"                .option(\"linesep\", \"\\n\")\\\r\n",
					"                .option(\"header\", \"true\")\\\r\n",
					"                .option(\"sep\", \"`\")\\\r\n",
					"                .option(\"multiLine\",'true')\\\r\n",
					"                .load(f'{input_url}/{entity_name}')\r\n",
					"\r\n",
					"        \r\n",
					"        dataframe = df\r\n",
					"\r\n",
					"        ## replace missing values with string 'NA'\r\n",
					"        dataframe = dataframe.na.fill(value='NA')\r\n",
					"\r\n",
					"        ## remove any duplicate rows\r\n",
					"        uniquedf = dataframe.dropDuplicates()\r\n",
					"\r\n",
					"        uniquedf.write.format('delta').mode('overwrite').save(f'{output_url}/{entity_name}')\r\n",
					"\r\n",
					"        cursor.execute(f\"UPDATE [dbo].[MetadataSalesCloud] SET [SilverWatermark] = ? WHERE [EntityName] = ? AND [CloudAbbreviation] = ?\", datetime.utcnow(), entity_name, cloud_alias)\r\n",
					"        cursor.commit()\r\n",
					"\r\n",
					"        print('Records written in delta table: ',df.count(),' for Entity: ', entity_name)\r\n",
					"\r\n",
					"    except Exception as err:\r\n",
					"        print(err)\r\n",
					""
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Transform M365 and Salesforce data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"container = \"silver\"\r\n",
					"salesforce_alias = \"SFSC\"\r\n",
					"email_alias = \"M365\"\r\n",
					"\r\n",
					"sfsc_silver_url = f'abfss://{container}@{adls_name}.dfs.core.windows.net/{salesforce_alias}'\r\n",
					"email_silver_url = f'abfss://{container}@{adls_name}.dfs.core.windows.net/{email_alias}'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create Unique list of emails from sender, to, cc, bcc, from fields"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define a function to extract unique emails from each item in DataFrame\r\n",
					"def extract_unique_emails(email_json):\r\n",
					"    unique_emails = set()\r\n",
					"    unique_emails_to = set()\r\n",
					"\r\n",
					"    # Extract sender and from email\r\n",
					"    unique_emails.add(email_json['sender']['emailAddress']['address'])\r\n",
					"    unique_emails.add(email_json['from']['emailAddress']['address'])\r\n",
					"\r\n",
					"    # Extract from to, cc, and bcc email addresses\r\n",
					"    email_fields = ['toRecipients','ccRecipients','bccRecipients']\r\n",
					"    for field in email_fields:\r\n",
					"        for recipient in email_json[field]:\r\n",
					"            if recipient is not None:\r\n",
					"                unique_emails.add(recipient['emailAddress']['address'])\r\n",
					"                if field == 'toRecipients':\r\n",
					"                    unique_emails_to.add(recipient['emailAddress']['address'])\r\n",
					"\r\n",
					"    return list(unique_emails), list(unique_emails_to)\r\n",
					"\r\n",
					"# Register the UDF to be used in DataFrame transformations\r\n",
					"spark.udf.register(\"extract_unique_emails\", extract_unique_emails, ArrayType(StringType()))\r\n",
					"\r\n",
					"# Use DataFrame functions to extract and concatenate unique email addresses for each row\r\n",
					"parquet_df_with_emails = parquet_df.withColumn(\"email_lists\", expr(\"extract_unique_emails(struct(*))\"))\r\n",
					"parquet_df_with_emails = parquet_df_with_emails.withColumn(\"unique_email_list\", parquet_df_with_emails[\"email_lists\"][0])\r\n",
					"parquet_df_with_emails = parquet_df_with_emails.withColumn(\"to_recipient_list\", parquet_df_with_emails[\"email_lists\"][1])\r\n",
					"\r\n",
					"# Drop the temporary column \"email_lists\" as it is no longer needed\r\n",
					"parquet_df_with_emails = parquet_df_with_emails.drop(\"email_lists\")\r\n",
					"\r\n",
					"parquet_df_with_emails.write.format('delta').mode('overwrite').save(f'{email_silver_url}/Email')"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create unique list of Employee and Client from Salesforce based on Opportunity"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the entity name and corresponding column names\r\n",
					"entity_columns = {\r\n",
					"    \"Account\": ['Id', 'IsDeleted', 'Name', 'Phone', 'AccountNumber', 'Website', 'Industry', 'AnnualRevenue', 'Description', 'Rating', 'OwnerId', 'LastModifiedDate'],\r\n",
					"    \"Opportunity\": ['Id' ,'IsDeleted' ,'AccountId' ,'Name' ,'Description' ,'Amount' ,'CloseDate' ,'Type' ,'IsClosed' ,'IsWon' ,'OwnerId' ,'CreatedDate' ,'LastModifiedDate' ,'ContactId'],\r\n",
					"    \"Contact\": ['Id' ,'IsDeleted' ,'AccountId' ,'LastName' ,'FirstName' ,'Name' ,'Phone' ,'Email' ,'OwnerId' ,'CreatedDate' ,'LastModifiedDate'],\r\n",
					"    \"User\": ['Id' ,'AccountId' ,'Address' ,'City' ,'ContactId' ,'CreatedById' ,'CreatedDate' ,'Department' ,'Name' ,'Email' ,'EmployeeNumber' ,'IsActive' ,'LastModifiedById' ,'LastModifiedDate' ,'MobilePhone']\r\n",
					"}\r\n",
					"\r\n",
					"entities = mssparkutils.fs.ls(sfsc_silver_url)\r\n",
					"\r\n",
					"# Read the entities and store them in a dictionary\r\n",
					"entity_dataframes = {}\r\n",
					"for entity in entities:\r\n",
					"    entity_name = os.path.splitext(entity.name)[0]\r\n",
					"\r\n",
					"    df_entity = spark.read.format('delta')\\\r\n",
					"        .option(\"linesep\", \"\\n\")\\\r\n",
					"        .option(\"header\", \"true\")\\\r\n",
					"        .option(\"sep\", \"`\")\\\r\n",
					"        .option(\"multiLine\", \"true\")\\\r\n",
					"        .load(f'{sfsc_silver_url}/{entity_name}')\r\n",
					"\r\n",
					"    selected_columns = entity_columns.get(entity_name)\r\n",
					"    df_final_entity = df_entity.select(*selected_columns)\r\n",
					"\r\n",
					"    entity_dataframes[entity_name] = df_final_entity\r\n",
					"\r\n",
					"# Cache the DataFrames for reuse\r\n",
					"entity_dataframes[\"Opportunity\"].cache()\r\n",
					"entity_dataframes[\"User\"].cache()\r\n",
					"entity_dataframes[\"Contact\"].cache()\r\n",
					"\r\n",
					"\r\n",
					"# Perform the joins on DataFrames directly\r\n",
					"df_EmployeeClientUniqueList = entity_dataframes[\"Opportunity\"].alias(\"opp\")\\\r\n",
					"    .join(entity_dataframes[\"User\"].alias(\"usr\"), col(\"opp.OwnerId\") == col(\"usr.Id\"))\\\r\n",
					"    .join(entity_dataframes[\"Contact\"].alias(\"ct\"), col(\"ct.Id\") == col(\"opp.ContactId\"))\\\r\n",
					"    .select(\r\n",
					"        col(\"opp.Id\").alias(\"OpportunityId\"),\r\n",
					"        col(\"usr.Email\").alias(\"EmployeeEmail\"),\r\n",
					"        col(\"ct.Email\").alias(\"ClientEmail\")\r\n",
					"    )\\\r\n",
					"    .distinct()\\\r\n",
					"    .filter(col(\"ClientEmail\") != \"NA\")\\\r\n",
					"    .filter(col(\"ClientEmail\").isNotNull())  # Filter records where ClientEmail is not null\r\n",
					"\r\n",
					"# Replace the '.invalid' in the 'EmployeeEmail' column with an empty string\r\n",
					"df_EmployeeClientUniqueList = df_EmployeeClientUniqueList.withColumn('EmployeeEmail', regexp_replace(col('EmployeeEmail'), '\\.invalid$', ''))\r\n",
					"\r\n",
					"# Collect the data as a list of rows\r\n",
					"rows = df_EmployeeClientUniqueList.collect()\r\n",
					"\r\n",
					"# Create a list comprehension to build the email_pairs_list directly\r\n",
					"opp_email_pairs_list = [[row['OpportunityId'], row['EmployeeEmail'], row['ClientEmail']] for row in rows]\r\n",
					"\r\n",
					"# # Print the list of lists with pairs of email addresses\r\n",
					"# print(\"List of EmployeeEmail and ClientEmail Pairs:\")\r\n",
					"# print(opp_email_pairs_list)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"email_pairs_rdd = spark.sparkContext.parallelize(opp_email_pairs_list)\r\n",
					"email_pairs_df = email_pairs_rdd.map(lambda x: Row(EmployeeEmail=x[1], opportunityId=x[0])).toDF()\r\n",
					"\r\n",
					"email_pairs_df.write.format('delta').mode('overwrite').save(f'{sfsc_silver_url}/OppEmployeeClientEmail')"
				],
				"execution_count": null
			}
		]
	}
}