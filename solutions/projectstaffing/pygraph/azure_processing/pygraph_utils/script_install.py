"""Pygraph Install Utility

Script that simplifies `pygraph_utils` library installation.

Requirements:
* Setuptools and wheel should be available in your environment.
* In order to avoid configuration mismatch or some undocumented behaviors, check the reference versions below,
they have been tested and work
* If you need to test any scenarios that require uninstalling the `pygraph_utils` package, do remove
the `pygraph_utils.egg-info` folder as it can hinder pkg_resources from removing the package existence from cache


Features:
+ checks if the `python` / `setuptools` package / `wheel` package **versions are equal to reference environment
versions**
+ checks if `pygraph-utils` is installed and if it is the latest version (by importing the version
from the `setup.py` module), the previous two use AND with the following truth table:

| Pygraph installed | Pygraph latest  | Result              |
| ----------------- | --------------- | ------------------- |
| True                      | True                   | True -> Do nothing |
| True                      | False                  | False -> Package is installed but is not the latest version,
installing |
| False                     | True                   | False -> This scenario doesn't exist, in which pygraph is not
the latest but is also not installed |
| False                     | False                  | False -> Package is not installed, installing |

+ above installing is done with `python setup.py develop` in order to allow for active pygraph library
development (hot-reloading edited package modules if needed in downstream modules);
  + **this approach comes with a anomaly** - if the package has been uninstalled with `pip`,
  `pkg_resources` will still pick up the package as being present because of the `pygraph_utils.egg-info` folder
  that is generated by the development mode install (a clean uninstall should involve the removing of said folder)
+ finally, the script builds the wheel and tarball files and moves them to the current working directory for ease

"""
#  Copyright (c) Microsoft Corporation. All rights reserved.
#  Licensed under the MIT license. See LICENSE file in the project root for full license information.

import subprocess as sp
import sys
import pkg_resources

from setuptools import __version__ as st_ver
from wheel import __version__ as whl_ver
from setup import version as pygraph_last_ver

reference_python_version = '3.7.9'
reference_setuptools_version = '51.0.0.post20201207'
reference_wheel_version = '0.36.2'

ansi_ok = '\033[0;92;1m'
ansi_nok = '\033[0;91;1m'
ansi_reset = '\033[0m'

if __name__ == '__main__':
    python_version = '.'.join(
        [str(item) for item in [sys.version_info.major, sys.version_info.minor, sys.version_info.micro]]
    )
    setuptools_version = st_ver
    wheel_version = whl_ver

    versions = {
        'Python': (python_version, reference_python_version),
        'setuptools': (setuptools_version, reference_setuptools_version),
        'wheel': (wheel_version, reference_wheel_version)
    }

    for key in versions.keys():
        context_version, reference_version = versions[key]

        if context_version == reference_version:
            print(f'{ansi_ok}{key} version identical to reference ("{context_version}"){ansi_reset}')
        else:
            print(f'{ansi_nok}{key} version ("{context_version}") different from '
                  f'reference ("{reference_version}"){ansi_reset}')

    print()
    is_pygraph_installed = [package_name.startswith('pygraph-utils')
                            for package_name in [p.project_name for p in pkg_resources.working_set]]
    is_pygraph_installed = any(is_pygraph_installed)

    if is_pygraph_installed:
        pygraph_ver = pkg_resources.working_set.by_key['pygraph-utils'].parsed_version.base_version
        is_pygraph_latest = pygraph_ver == pygraph_last_ver
    else:
        pygraph_ver = ''
        is_pygraph_latest = False

    if is_pygraph_installed and is_pygraph_latest:
        print(f'{ansi_ok}pygraph-utils is already installed with the latest version ("{pygraph_last_ver}"){ansi_reset}')
    else:
        if is_pygraph_installed:
            print(f'{ansi_nok}pygraph-utils version ("{pygraph_ver}") different '
                  f'from latest version ("{pygraph_last_ver}"), proceeding to install...{ansi_reset}')
        else:
            print(f'{ansi_nok}pygraph is not installed locally, proceeding to install...{ansi_reset}')

        out = sp.check_output('python setup.py develop'.split(' '))
        print(out.decode('utf-8'))

    print(f'{ansi_nok}Known anomaly: if the package has been uninstalled with pip and '
          f'\033[4mpygraph_utils.egg-info\033[24m still exists, '
          f'pkg_resources still has the version cached.{ansi_reset}')

    # TODO: run `python setup.py sdist bdist_wheel`
    # TODO: run `cd dist/ ; pip install pygraph_utils-0.1.0-py3-none-any.whl`, move wheel to current folder

    print(f'{ansi_ok}\nBuilding pygraph-utils wheel... {ansi_reset}')
    out = sp.check_output('python setup.py sdist bdist_wheel'.split(' '))
    print(out.decode('utf-8'))

    print(f'{ansi_ok}Moving pygraph-utils wheel and tarball to current folder... {ansi_reset}')
    out = sp.check_output(f'mv -v dist/pygraph_utils-{pygraph_ver}-py3-none-any.whl ./'.split(' '))
    print(out.decode('utf-8'), end='')
    out = sp.check_output(f'mv -v dist/pygraph_utils-{pygraph_ver}.tar.gz ./'.split(' '))
    print(out.decode('utf-8'))

    print()
