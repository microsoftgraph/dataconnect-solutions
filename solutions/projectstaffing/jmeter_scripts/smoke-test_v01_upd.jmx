<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="SUT" elementType="Argument">
              <stringProp name="Argument.name">SUT</stringProp>
              <stringProp name="Argument.value">system under test URL</stringProp>
              <stringProp name="Argument.desc">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="username" elementType="Argument">
              <stringProp name="Argument.name">username</stringProp>
              <stringProp name="Argument.value">user used for testing (non-MFA user)</stringProp>
              <stringProp name="Argument.desc">M365 account for testing SkillsFinder</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">password for test user</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">false</stringProp>
            </elementProp>
            <elementProp name="name" elementType="Argument">
              <stringProp name="Argument.name">name</stringProp>
              <stringProp name="Argument.value">SkillsFinder Test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="appName" elementType="Argument">
              <stringProp name="Argument.name">appName</stringProp>
              <stringProp name="Argument.value">SkillsFinder</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="skill1" elementType="Argument">
              <stringProp name="Argument.name">skill1</stringProp>
              <stringProp name="Argument.value">Data</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="skill1Partial" elementType="Argument">
              <stringProp name="Argument.name">skill1Partial</stringProp>
              <stringProp name="Argument.value">Dat</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="skill1Lowercase" elementType="Argument">
              <stringProp name="Argument.name">skill1Lowercase</stringProp>
              <stringProp name="Argument.value">date</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="skill2" elementType="Argument">
              <stringProp name="Argument.name">skill2</stringProp>
              <stringProp name="Argument.value">ux</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="freshnessDefault" elementType="Argument">
              <stringProp name="Argument.name">freshnessDefault</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="volumeDefault" elementType="Argument">
              <stringProp name="Argument.name">volumeDefault</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="relevanceScoreDefault" elementType="Argument">
              <stringProp name="Argument.name">relevanceScoreDefault</stringProp>
              <stringProp name="Argument.value">70</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="realDomainsHigh" elementType="Argument">
              <stringProp name="Argument.name">realDomainsHigh</stringProp>
              <stringProp name="Argument.value">microsoft.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">bulk of the emails expected from these domains (high volume)</stringProp>
            </elementProp>
            <elementProp name="realDomainsLow" elementType="Argument">
              <stringProp name="Argument.name">realDomainsLow</stringProp>
              <stringProp name="Argument.value">sentinelcsg.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">some emails expected from this domain (low volume)</stringProp>
            </elementProp>
            <elementProp name="testDomains" elementType="Argument">
              <stringProp name="Argument.name">testDomains</stringProp>
              <stringProp name="Argument.value">example.com;Test.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">no emails expected from these domains</stringProp>
            </elementProp>
            <elementProp name="batchSize" elementType="Argument">
              <stringProp name="Argument.name">batchSize</stringProp>
              <stringProp name="Argument.value">50</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/usr/bin/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">true</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="AppServiceAuthSession" elementType="Cookie" testname="AppServiceAuthSession">
              <stringProp name="Cookie.value">${AppServiceAuthSession}</stringProp>
              <stringProp name="Cookie.domain">${SUT}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">true</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SUT}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="LOGIN - selenium (and verifying logged in user name displayed on the home page)" enabled="true">
          <stringProp name="WebDriverSampler.script">var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var timeout = 30
var wait = new org.openqa.selenium.support.ui.WebDriverWait(WDS.browser,timeout)
var by = org.openqa.selenium.By
var timeUnit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()

WDS.browser.manage().timeouts().pageLoadTimeout(timeout, timeUnit.SECONDS);
WDS.browser.manage().timeouts().setScriptTimeout(timeout, timeUnit.SECONDS);
WDS.browser.manage().timeouts().implicitlyWait(timeout,timeUnit.SECONDS);

WDS.browser.get(WDS.args[0])
wait.until(conditions.visibilityOfElementLocated(by.xpath(&apos;//div[text()=&quot;Sign in&quot;]&apos;)))

WDS.browser.findElement(by.xpath(&apos;//input[@type=&quot;email&quot;]&apos;)).sendKeys(WDS.args[1])
WDS.browser.findElement(by.xpath(&apos;//input[@value=&quot;Next&quot;]&apos;)).click()
WDS.browser.findElement(by.xpath(&apos;//input[@name=&quot;passwd&quot;]&apos;)).sendKeys(WDS.args[2])
WDS.browser.findElement(by.xpath(&apos;//input[@value=&quot;Sign in&quot;]&apos;)).click()
WDS.browser.findElement(by.xpath(&apos;//input[@value=&quot;Yes&quot;]&apos;)).click()
wait.until(conditions.presenceOfElementLocated(by.xpath(&apos;//div[text()=&quot; SkillsFinder Test &quot;]&apos;)))

var cookie = WDS.browser.manage().getCookieNamed(&quot;AppServiceAuthSession&quot;).toString()

vars.put(&apos;AppServiceAuthSession&apos;, cookie.replaceAll(&quot;AppServiceAuthSession=&quot;, &quot;&quot;).replaceAll(&quot;;.*$&quot;, &quot;&quot;))</stringProp>
          <stringProp name="WebDriverSampler.parameters">https://${SUT} ${username} ${password}</stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check About page" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2146434458">Check About page</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Update Settings" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1994805658">Update Settings</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reset Settings" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="955660308">Reset Settings</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Update Team name and description" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="54722794">Update Team name and description</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check default skill search (no skills, availability=today)" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1490236661">Check default skill search (no skills, availability=today)</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Autocomplete" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-673627128">Autocomplete</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check skill search, add one skill tag" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="94967023">Check skill search, add one skill tag</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check skill search, move availability to the future" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1975673374">Check skill search, move availability to the future</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check skill search, add second skill tag" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1202760959">Check skill search, add second skill tag</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check employee profile page" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-310883936">Check employee profile page</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Add found employee to the team" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1592198940">Add found employee to the team</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Export team" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-485099735">Export team</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Export skill search" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1036095831">Export skill search (questionable value if not UI)</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Disabled data sources are not used for search" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="118995870">Disabled data sources are not used for skill search</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Emails data source used when &quot;Process emails newer than&quot;  enabled and value in the past" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1473773890">Emails data source used when &quot;Process emails newer than&quot; enabled and value in the past</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check &quot;Process emails newer than&quot; value is used in search" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2122930599">Check &quot;Process emails newer than&quot; value is used in search</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check &quot;Process emails newer than&quot; value is ignored when disabled" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1010165421">Check &quot;Process emails newer than&quot; value is ignored when disabled</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check &quot;Include emails from domains&quot; value is used in search" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1350124279">Check &quot;Include emails from domains&quot; value is used in search</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check &quot;Include emails from domains&quot; value is ignored when disabled" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1025921291">Check &quot;Include emails from domains&quot; value is ignored when disabled</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Remove team member from team" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1070443532">Remove team member from team</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check name search" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1088026021">Check name search</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Update team name/description and Settings to back to default" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1387234104">Update team name/description and Settings to back to default</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check About page" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET about" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/about</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion appName" enabled="true">
            <stringProp name="JSON_PATH">$.appName</stringProp>
            <stringProp name="EXPECTED_VALUE">${appName}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion buildBranch not null" enabled="true">
            <stringProp name="JSON_PATH">$.buildBranch</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion builtAt not null" enabled="true">
            <stringProp name="JSON_PATH">$.builtAt</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion commit not null" enabled="true">
            <stringProp name="JSON_PATH">$.commit</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion dockerTag not null" enabled="true">
            <stringProp name="JSON_PATH">$.dockerTag</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion javaVersion not null" enabled="true">
            <stringProp name="JSON_PATH">$.javaVersion</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion scalaVersion not null" enabled="true">
            <stringProp name="JSON_PATH">$.scalaVersion</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion version not null" enabled="true">
            <stringProp name="JSON_PATH">$.version</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract dockerTag" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">dockerTag</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.dockerTag</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Update Settings" enabled="true">
        <stringProp name="TestPlan.comments">settings update with GET recheck; subsequent settings updates other then first Reset Settings skip GET rechecks</stringProp>
      </TestFragmentController>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Settings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: false,&#xd;
	&quot;freshness&quot;: 3,&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: 3,&#xd;
	&quot;volumeEnabled&quot;: false,&#xd;
	&quot;relevanceScore&quot;: 3,&#xd;
	&quot;relevanceScoreEnabled&quot;: false,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: false,&#xd;
	&quot;includedEmailDomains&quot;: [&quot;sentinelcsg.com&quot;],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [&quot;sentinelcsg.com&quot;],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: false,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: &quot;${__timeShift(yyyy-MM-dd,,P-365D,,emailFreshnessDate)}T00:00:00-07:00&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">changed order, added/changed values, most disabled</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET check updated Settings" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Data Sources" enabled="true">
            <stringProp name="JSON_PATH">$.searchCriteria</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;searchCriterionType&quot;:&quot;PROFILE_SKILLS&quot;,&quot;isActive&quot;:false},{&quot;searchCriterionType&quot;:&quot;PROFILE_ABOUT_ME&quot;,&quot;isActive&quot;:false},{&quot;searchCriterionType&quot;:&quot;PROFILE_TOPICS&quot;,&quot;isActive&quot;:true},{&quot;searchCriterionType&quot;:&quot;EMAIL_CONTENT&quot;,&quot;isActive&quot;:true}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="TestPlan.comments">order and status is not default</stringProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Include Received Emails Content&quot; disabled" enabled="true">
            <stringProp name="JSON_PATH">$.useReceivedEmailsContent</stringProp>
            <stringProp name="EXPECTED_VALUE">false</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Volume disabled" enabled="true">
            <stringProp name="JSON_PATH">$.volumeEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">false</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Volume value" enabled="true">
            <stringProp name="JSON_PATH">$.volume</stringProp>
            <stringProp name="EXPECTED_VALUE">3</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Freshness enabled" enabled="true">
            <stringProp name="JSON_PATH">$.freshnessEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Freshness value" enabled="true">
            <stringProp name="JSON_PATH">$.freshness</stringProp>
            <stringProp name="EXPECTED_VALUE">3</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Relevance Score disabled" enabled="true">
            <stringProp name="JSON_PATH">$.relevanceScoreEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">false</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Relevance Score value" enabled="true">
            <stringProp name="JSON_PATH">$.relevanceScore</stringProp>
            <stringProp name="EXPECTED_VALUE">3</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Process emails newer than&quot; disabled" enabled="true">
            <stringProp name="JSON_PATH">$.freshnessBeginDateEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">false</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Process emails newer than&quot; value is not null" enabled="true">
            <stringProp name="JSON_PATH">$.freshnessBeginDate</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Include emails from domains&quot; is enabled" enabled="true">
            <stringProp name="JSON_PATH">$.includedEmailDomainsEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Include emails from domains&quot; value" enabled="true">
            <stringProp name="JSON_PATH">$.includedEmailDomains</stringProp>
            <stringProp name="EXPECTED_VALUE">${realDomainsLow}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Exclude emails from domains&quot; is disabled" enabled="true">
            <stringProp name="JSON_PATH">$.excludedEmailDomainsEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">false</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Exclude emails from domains&quot; value" enabled="true">
            <stringProp name="JSON_PATH">$.excludedEmailDomains</stringProp>
            <stringProp name="EXPECTED_VALUE">${realDomainsLow}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Reset Settings" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET default employee ranking" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings/default-employee-ranking</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion volume value" enabled="true">
            <stringProp name="JSON_PATH">$.volume</stringProp>
            <stringProp name="EXPECTED_VALUE">${volumeDefault}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion volumeEnabled" enabled="true">
            <stringProp name="JSON_PATH">$.volumeEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion freshness value" enabled="true">
            <stringProp name="JSON_PATH">$.freshness</stringProp>
            <stringProp name="EXPECTED_VALUE">${freshnessDefault}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion freshnessEnabled" enabled="true">
            <stringProp name="JSON_PATH">$.freshnessEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion relevanceScore value" enabled="true">
            <stringProp name="JSON_PATH">$.relevanceScore</stringProp>
            <stringProp name="EXPECTED_VALUE">${relevanceScoreDefault}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert relevanceScoreEnabled" enabled="true">
            <stringProp name="JSON_PATH">$.relevanceScoreEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Settings to default" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: true,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET check Settings updated to defaut" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Data Sources defaut" enabled="true">
            <stringProp name="JSON_PATH">$.searchCriteria</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;searchCriterionType&quot;:&quot;PROFILE_SKILLS&quot;,&quot;isActive&quot;:true},{&quot;searchCriterionType&quot;:&quot;PROFILE_ABOUT_ME&quot;,&quot;isActive&quot;:true},{&quot;searchCriterionType&quot;:&quot;PROFILE_TOPICS&quot;,&quot;isActive&quot;:true},{&quot;searchCriterionType&quot;:&quot;EMAIL_CONTENT&quot;,&quot;isActive&quot;:true}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Include Received Emails Content&quot; enabled" enabled="true">
            <stringProp name="JSON_PATH">$.useReceivedEmailsContent</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Volume enabled" enabled="true">
            <stringProp name="JSON_PATH">$.volumeEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Volume value default" enabled="true">
            <stringProp name="JSON_PATH">$.volume</stringProp>
            <stringProp name="EXPECTED_VALUE">${volumeDefault}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Freshness enabled" enabled="true">
            <stringProp name="JSON_PATH">$.freshnessEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Freshness value default" enabled="true">
            <stringProp name="JSON_PATH">$.freshness</stringProp>
            <stringProp name="EXPECTED_VALUE">${freshnessDefault}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Relevance Score enabled" enabled="true">
            <stringProp name="JSON_PATH">$.relevanceScoreEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Emails Ranking Relevance Score value default" enabled="true">
            <stringProp name="JSON_PATH">$.relevanceScore</stringProp>
            <stringProp name="EXPECTED_VALUE">${relevanceScoreDefault}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Process emails newer than&quot; enabled" enabled="true">
            <stringProp name="JSON_PATH">$.freshnessBeginDateEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Include emails from domains&quot; is enabled" enabled="true">
            <stringProp name="JSON_PATH">$.includedEmailDomainsEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Include emails from domains&quot; value" enabled="true">
            <stringProp name="JSON_PATH">$.includedEmailDomains</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Exclude emails from domains&quot; is enabled" enabled="true">
            <stringProp name="JSON_PATH">$.excludedEmailDomainsEnabled</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert &quot;Exclude emails from domains&quot; value" enabled="true">
            <stringProp name="JSON_PATH">$.excludedEmailDomains</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Update Team name and description" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT update team info" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;teamName&quot;: &quot;Jmeter test ${__time()}&quot;,&#xd;
  &quot;teamDescription&quot;: &quot;&lt;ul&gt;&lt;li&gt;&lt;p&gt;${SUT}&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;${__time(yyyy-MM-dd,)}&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;${dockerTag}&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/team/info</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Team information saved</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET team info" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/team/info</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract teamName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">teamName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.teamName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert teamName" enabled="true">
            <stringProp name="JSON_PATH">$.teamName</stringProp>
            <stringProp name="EXPECTED_VALUE">${teamName}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert teamDescription not null" enabled="true">
            <stringProp name="JSON_PATH">$.teamDescription</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check default skill search (no skills, availability=today)" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH no_skill+today " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">assumption there are employees Available Now or with availabiity in the past in the system</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert total of returned employees not 0" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="TestPlan.comments">assumption: there are always employees with either up_to_redeployment date in the past or  Available Now (null</stringProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert no inferredSkills for search w/o skill term" enabled="true">
            <stringProp name="JSON_PATH">$.employees[0].inferredSkills</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert no highlightedTerms for search w/o skill term" enabled="true">
            <stringProp name="JSON_PATH">$.employees[0].highlightedTerms</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Autocomplete" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET auto-complete" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/employee-search/skill-suggestions?beginsWith=${skill1Partial}&amp;taxonomiesList=software</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion contains searched skill" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1651584657">(?i)${skill1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert top suggested skill" enabled="true">
            <stringProp name="TestPlan.comments">&quot;data&quot; is at the top of suggestion list for &quot;Dat&quot;</stringProp>
            <stringProp name="JSON_PATH">$[0].suggestedSkill</stringProp>
            <stringProp name="EXPECTED_VALUE">${skill1Lowercase}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert related terms" enabled="true">
            <stringProp name="TestPlan.comments">asumption is that skill1=&quot;data&quot; is at the top of suggestion list for &quot;Dat&quot;</stringProp>
            <stringProp name="JSON_PATH">$[0].relatedTerms</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check skill search, add one skill tag" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+today" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert total of returned employees not 0" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert top employee declaredSkills not empty" enabled="true">
            <stringProp name="JSON_PATH">$.employees[0].declaredSkills</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert top employee relevantSkills not empty" enabled="true">
            <stringProp name="JSON_PATH">$.employees[0].relevantSkills</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert top employee highlightedTerms not empty" enabled="true">
            <stringProp name="JSON_PATH">$.employees[0].highlightedTerms</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert top employee inferredSkills not empty" enabled="false">
            <stringProp name="JSON_PATH">$.employees[0].inferredSkills</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract totalSkill1Today" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">totalSkill1Today</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.total</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check skill search, move availability to the future" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+futureDate, extract top employee" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion total not 0" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract employee id" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract top employee name" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract top employee mail" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeMail</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].mail</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract top employee about me" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeAbout</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].about</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract top employee role" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeRole</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].role</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract top employee reportsTo" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeReportsTo</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].reportsTo</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract top employee relevant skills" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeRelevantSkills</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].relevantSkills</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract top employee inferred skills" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeInferredSkills</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].inferredSkills</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract top employee highlighted terms" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeHighlightedTerms</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].highlightedTerms</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract top employee declared skills" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">employeeDeclaredSkills</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.employees[0].declaredSkills</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert top employee mail is not null" enabled="true">
            <stringProp name="JSON_PATH">$.employees[0].mail</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">true</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert top employee highlightedTerms contain skill1" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1651584657">(?i)${skill1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">employeeHighlightedTerms</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert top employee relevantSkills contain skill1" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1651584657">(?i)${skill1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">employeeRelevantSkills</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert top employee declaredSkills contain skill1" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1651584657">(?i)${skill1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">employeeDeclaredSkills</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract totalSkill1Future" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">totalSkill1Future</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.total</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assert employee total change" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">var1 = ${__jexl3(&quot;${totalSkill1Today}&quot;)};
var2 = ${__jexl3(&quot;${totalSkill1Future}&quot;)};

if (var2 &lt;= var1)
{
 AssertionResult.setFailure(true);
 AssertionResult.setFailureMessage(&quot;Unexpected result. For a common skill term more employees should be found for a future date than for today&quot;);
}
</stringProp>
            <stringProp name="scriptLanguage">jexl</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check skill search, add second skill tag" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+skill2+futureDate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;,&#xd;
    &quot;${skill2}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion total not 0" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract totalSkill1and2Future" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">totalSkill1and2Future</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.total</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check employee profile page" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET employee profile" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee/${employeeId}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion name" enabled="true">
            <stringProp name="JSON_PATH">$.name</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeName}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion mail" enabled="true">
            <stringProp name="JSON_PATH">$.mail</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeMail}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion declaredSkills" enabled="true">
            <stringProp name="JSON_PATH">$.declaredSkills</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeDeclaredSkills}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion relevantSkills" enabled="true">
            <stringProp name="JSON_PATH">$.declaredSkills</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeDeclaredSkills}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="TestPlan.comments">why do we include also relevantSkills to profile api? Now relevantSkills are the same as declaredSkills</stringProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Add found employee to the team" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET team members initial" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/team/structure/members</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract teamInitial" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">teamInitial</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.*name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If employeeId, employeeMail and employeeName were exctracted and are not null, Add employee to team" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${employeeId}&quot; != null &amp;&amp; &quot;${{employeeMail}&quot; != null &amp;&amp; &quot;${employeeName}&quot; != null)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ADD employee to team (note: open bug)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;employeeId&quot;: &quot;${employeeId}&quot;,&#xd;
  &quot;email&quot;: &quot;${employeeMail}&quot;,&#xd;
  &quot;name&quot;: &quot;${employeeName}&quot;,&#xd;
  &quot;skills&quot;: ${employeeRelevantSkills}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">gdc/team/structure/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">sending relevantSkills is an open bug 699, should send declared skills (or include search context)</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${SUT}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
              <stringProp name="JSON_PATH">$.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Team member saved</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET team members - after add" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/team/structure/members</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion team owner id" enabled="true">
            <stringProp name="JSON_PATH">$.[?(@.employeeId == &quot;${employeeId}&quot;)].userId</stringProp>
            <stringProp name="EXPECTED_VALUE">(?i)${username}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion employee name" enabled="true">
            <stringProp name="JSON_PATH">$.[?(@.employeeId == &quot;${employeeId}&quot;)].name</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeName}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion employee mail" enabled="true">
            <stringProp name="JSON_PATH">$.[?(@.employeeId == &quot;${employeeId}&quot;)].email</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeMail}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion employee skills (note: open bug)" enabled="true">
            <stringProp name="JSON_PATH">$.[?(@.employeeId == &quot;${employeeId}&quot;)].skills</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeRelevantSkills}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="TestPlan.comments">note: relevantSkills is an open bug 699, should be declared skills (or include search context)</stringProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract team member id" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">teamMemberId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.[?(@.employeeId == &quot;${employeeId}&quot;)].teamMemberId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract teamAfter1" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">teamAfter1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.*name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assert number of team members change" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">var1 = ${__jexl3(&quot;${teamInitial_matchNr}&quot;)};
var2 = ${__jexl3(&quot;${teamAfter1_matchNr}&quot;)};

if (var2 - var1 != 1)
{
 AssertionResult.setFailure(true);
 AssertionResult.setFailureMessage(&quot;Number of team members expected to increase 1&quot;);
}
</stringProp>
            <stringProp name="scriptLanguage">jexl</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Export team" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET team members - download" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/team/download</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion team owner mail" enabled="true">
            <stringProp name="JSON_PATH">$.ownerMail</stringProp>
            <stringProp name="EXPECTED_VALUE">(?i)${username}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion team name" enabled="true">
            <stringProp name="JSON_PATH">$.name</stringProp>
            <stringProp name="EXPECTED_VALUE">${teamName}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion team description contains expected text" enabled="true">
            <stringProp name="JSON_PATH">$.[?(@.description =~ /.*${dockerTag}.*/i)]description</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert test employee name included in download" enabled="true">
            <stringProp name="JSON_PATH">$.members.[?(@.mail == &quot;${employeeMail}&quot;)]name</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeName}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Export skill search (questionable value if not UI)" enabled="true">
        <stringProp name="TestPlan.comments">test doesn&apos;t catch is exported file is actually produced or not, and not suitable for excel vs csv export testing (doesn&apos;t catch bugs like 1082 and 1083)</stringProp>
      </TestFragmentController>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH no_skill+futureDate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">assumption is that there will be more than 50 (batch size) employees found</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert some employees are found" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract totalEmployees" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">totalEmployees</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.total</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH no_skill+futureDate - exporting all found employees w/o prior scrolling" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${totalEmployees}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert some employees are found " enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Disabled data sources are not used for skill search" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST settings - disable all data sources" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: false,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+futureDate - after disable all data sources" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion no employees found" enabled="true">
            <stringProp name="JSON_PATH">$.employees</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Emails data source used when &quot;Process emails newer than&quot; enabled and value in the past" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update settings to have only Emails data sources enabled, freshnessBeginDate enabled and value in the past" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: true,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: &quot;${__timeShift(yyyy-MM-dd,,P-365D,,emailFreshnessDate)}T00:00:00-07:00&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+futureDate - after freshnessBeginDate in the past, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert some employees found" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check &quot;Process emails newer than&quot; value is used in search" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST settings - freshnessBeginDate enabled with value in the future, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: true,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1D,,emailFreshnessDate)}T00:00:00-07:00&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">When freshnessBeginDate is in the future, expected that all emails fould be fitered out as none of the existing emails in Emails data source can have sent date in the future</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+futureDate - check &quot;Process emails newer than&quot; value is used in search" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion no employees found" enabled="true">
            <stringProp name="JSON_PATH">$.employees</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check &quot;Process emails newer than&quot; value is ignored when disabled" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST settings - freshnessBeginDate disabled with value in the future, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: true,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: false,&#xd;
	&quot;includedEmailDomains&quot;: [],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1D,,emailFreshnessDate)}T00:00:00-07:00&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+futureDate - check &quot;Process emails newer than&quot; value is not used when the option is disabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert some employees found for disabled freshnessBeginDate in the future" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check &quot;Include emails from domains&quot; value is used in search" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST settings - included domains w/o emails, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: true,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [&quot;${testDomains}&quot;],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+futureDate - after included domains w/o emails, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion no employees found" enabled="true">
            <stringProp name="JSON_PATH">$.employees</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST settings - included domains have emails, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: true,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [&quot;${realDomainsHigh}&quot;],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+futureDate - after included domains have emails, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert employees found when included domains have emails and only emails data sources enabled" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check &quot;Include emails from domains&quot; value is ignored when disabled" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST settings - included domains w/o emails, enabled, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: true,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [&quot;${testDomains}&quot;],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+futureDate - after included domains w/o emails, enabled, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion no employees found" enabled="true">
            <stringProp name="JSON_PATH">$.employees</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST settings - included domains w/o emails, disabled, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: true,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [&quot;${testDomains}&quot;],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: false,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH skill1+futureDate - included domains w/o emails, disabled, email data sources enabled" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${skill1}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;SKILLS&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert employees found when included domains w/o emails, disabled, and only emails data sources enabled" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Remove team member from team" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Remove team member added during the test run" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/team/structure/members/${teamMemberId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1947838705">Team member deleted successfully</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check the removed from team test employee is no longer returned as team member" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gdc/team/structure/members</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion removed member id" enabled="true">
            <stringProp name="JSON_PATH">$.[?(@.teamMemberId == &quot;${teamMemberId}&quot;)]</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion removed employee name" enabled="true">
            <stringProp name="JSON_PATH">$.[?(@.employeeId == &quot;${employeeId}&quot;)].name</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeName}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Check name search" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST settings - disable all data sources" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: false&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: false,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEARCH employeeName+futureDate - after disable all data sources" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;searchTerms&quot;: [&quot;${employeeName}&quot;],&#xd;
	&quot;searchCriteria&quot;: &quot;NAME&quot;,&#xd;
	&quot;taxonomiesList&quot;: [&quot;software&quot;],&#xd;
	&quot;searchFilterValues&quot;: {},&#xd;
	&quot;requiredAvailability&quot;: {&#xd;
		&quot;minPercentage&quot;: 0,&#xd;
		&quot;availableAtTheLatestOn&quot;: &quot;${__timeShift(yyyy-MM-dd,,P365D,,futureDate)}&quot;&#xd;
	},&#xd;
	&quot;sortBy&quot;: &quot;relevance&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">gdc/employee-search/search?size=${batchSize}&amp;offset=0</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert at least one employee found" enabled="true">
            <stringProp name="JSON_PATH">$.total</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert top employee is exact match" enabled="true">
            <stringProp name="JSON_PATH">$.employees[0].id</stringProp>
            <stringProp name="EXPECTED_VALUE">${employeeId}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Update team name/description and Settings to back to default" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT update team info to generic" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;teamName&quot;: &quot;Test team name&quot;,&#xd;
  &quot;teamDescription&quot;: &quot;&lt;p&gt;Test description&lt;/p&gt;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/team/info</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Team information saved</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST settings - default data sources, emails ranking, email properties" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;dataSourceSettings&quot;: {&#xd;
		&quot;dataSourcesPriority&quot;: [&quot;M365&quot;, &quot;HRData&quot;],&#xd;
		&quot;isHRDataMandatory&quot;: false&#xd;
	},&#xd;
	&quot;searchCriteria&quot;: [{&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_SKILLS&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_ABOUT_ME&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;PROFILE_TOPICS&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}, {&#xd;
		&quot;searchCriterionType&quot;: &quot;EMAIL_CONTENT&quot;,&#xd;
		&quot;isActive&quot;: true&#xd;
	}],&#xd;
	&quot;searchResultsFilters&quot;: [{&#xd;
		&quot;dataSource&quot;: &quot;M365&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;m365_country&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_state&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_city&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_department&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;m365_role&quot;,&#xd;
			&quot;isActive&quot;: true&#xd;
		}]&#xd;
	}, {&#xd;
		&quot;dataSource&quot;: &quot;HRData&quot;,&#xd;
		&quot;filters&quot;: [{&#xd;
			&quot;filterType&quot;: &quot;hr_data_location&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}, {&#xd;
			&quot;filterType&quot;: &quot;hr_data_role&quot;,&#xd;
			&quot;isActive&quot;: false&#xd;
		}]&#xd;
	}],&#xd;
	&quot;useReceivedEmailsContent&quot;: true,&#xd;
	&quot;freshness&quot;: ${freshnessDefault},&#xd;
	&quot;freshnessEnabled&quot;: true,&#xd;
	&quot;volume&quot;: ${volumeDefault},&#xd;
	&quot;volumeEnabled&quot;: true,&#xd;
	&quot;relevanceScore&quot;: ${relevanceScoreDefault},&#xd;
	&quot;relevanceScoreEnabled&quot;: true,&#xd;
	&quot;freshnessBeginDateEnabled&quot;: true,&#xd;
	&quot;includedEmailDomains&quot;: [],&#xd;
	&quot;includedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;excludedEmailDomains&quot;: [],&#xd;
	&quot;excludedEmailDomainsEnabled&quot;: true,&#xd;
	&quot;taxonomyList&quot;: [{&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;software&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;data_science&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;facilities&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;finance&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;human_relations&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;legal&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;sales_marketing&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;oilgas&quot;&#xd;
	}, {&#xd;
		&quot;enumClass&quot;: &quot;com.microsoft.graphdataconnect.skillsfinder.models.TaxonomyType&quot;,&#xd;
		&quot;value&quot;: &quot;healthcare&quot;&#xd;
	}],&#xd;
	&quot;freshnessBeginDate&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/gdc/configurations/search-settings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${SUT}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert response message" enabled="true">
            <stringProp name="JSON_PATH">$.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Employee search settings updated.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
