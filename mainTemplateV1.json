{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  // Parameters are values that are configurable by the partner.
  "parameters": {
    "AppId": {
      "type": "string",
      "metadata": {
        "description": "The id of the Azure AD Application that has permission to run the ADF pipeline. This should be a multi tenant application."
      }
    },
    "AppSecret": {
      "type": "securestring",
      "metadata": {
        "description": "The secret for the Azure AD Application. App Secret is required for Microsoft Graph Data Connect (see documentation https://docs.microsoft.com/en-us/graph/data-connect-quickstart?tabs=Microsoft365&tutorial-step=2)."
      }
    },
    "AzureActiveDirectoryTenantId": {
      "type": "string",
      "metadata": {
        "description": "The Azure Active Directory Tenant Id of the customer whose data needs to be extracted."
      }
    },
    "DataFactoryName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Data Factory instance containing your pipeline logic."
      }
    },
    "ADLSSinkKeyVaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Key Vault to be used for authenticating the ADLS Sink."
      }
    },
    "ADLSSinkSecretName": {
      "type": "string",
      "metadata": {
        "description": "The name of the secret in the Azure Key Vault to be used for authenticating the ADLS Sink."
      }
    }
  },
  // Variables can apply functions to parameters or be hardcoded values.
  "variables": {
    // Name given to the storage account created in the Partner subscription.
    "destinationAdlsAccountName": "[concat('astore', uniqueString(resourceGroup().id))]",
    // Name given to the key vault created in the Partner subscription.
    "keyVaultName": "[concat('keyvault', uniqueString(resourceGroup().id))]",
    "datasetName": "VivaInsightsDataset_PersonReport_v1",
    "dataFactoryAppResourceId": "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]",
    "adlsSinkKeyVaultLink": "adlsSinkKeyVaultLink"
  },
  "resources": [
    // Script to get the service principal from an app registration in the Partner subscription.
    {
      "apiVersion": "2020-10-01",
      "kind": "AzurePowerShell",
      "location": "[resourceGroup().location]",
      "name": "ApplicationScript",
      "properties": {
        "forceUpdateTag": "1",
        "azPowerShellVersion": "8.0",
        "environmentVariables": [
          {
            "name": "AppSecret",
            "secureValue": "[parameters('AppSecret')]"
          }
        ],
        "arguments": "[format(' -AppID {0} -TenantId {1} -AppToGet {2}', parameters('AppId'), subscription().tenantId, parameters('AppId'))]",
        "primaryScriptUri": "https://raw.githubusercontent.com/niblak/dataconnect-solutions/vivaarmtemplates/ARMTemplates/SupportScripts/GetServicePricipalId.ps1",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D",
        "dependsOn": []
      },
      "type": "Microsoft.Resources/deploymentScripts"
    },
    // Storage account in Partner subscription
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-01-01",
      "name": "[variables('destinationAdlsAccountName')]",
      "location": "eastus2",
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "allowSharedKeyAccess": true,
        "isHnsEnabled": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    // Create a blob service resource (needed for blob operations) in the Partner storage account
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('destinationAdlsAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('destinationAdlsAccountName'))]"
      ],
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    // Create a container in the Partner storage account
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('destinationAdlsAccountName'), '/default/datasets')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('destinationAdlsAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('destinationAdlsAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    // Add Contributor role assignment to the Partner storage account container
    {
      "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('destinationAdlsAccountName'), 'default', 'datasets')]"
      ],
      "name": "[concat(variables('destinationAdlsAccountName'),'/Microsoft.Authorization/',guid(resourceGroup().id))]",
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference('ApplicationScript').outputs.PrincipalId]"
      }
    },
    // Add Storage Blob Data Contributor role assignment to the Partner storage account container
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/providers/roleAssignments",
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('destinationAdlsAccountName'), 'default', 'datasets')]"
      ],
      "name": "[concat(variables('destinationAdlsAccountName'), '/default/datasets/Microsoft.Authorization/', guid(concat('blobdatacontributor', resourceGroup().id)))]",
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference('ApplicationScript').outputs.PrincipalId]"
      }
    },
    // Add Key Vault in the Partner subscription.
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "eastus2",
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enableRbacAuthorization": true,
        "vaultUri": "[concat('https://', variables('keyVaultName'), '.vault.azure.net/')]",
        "provisioningState": "Succeeded",
        "publicNetworkAccess": "Enabled"
      }
    },
    // Add Key Vault Crypto User role assignment to the Partner Key Vault.
    {
      "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[concat(variables('keyVaultName'),'/Microsoft.Authorization/',guid(concat('keyvault', resourceGroup().id)))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "principalId": "[reference('ApplicationScript').outputs.PrincipalId]",
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '12338af0-0e69-4776-bea7-57ae8d297424')]"
      }
    },
    // Add Key Vault Secrets User role assignment to the Partner Key Vault.
    {
      "name": "[concat(parameters('ADLSSinkKeyVaultName'),'/Microsoft.Authorization/',guid(concat(parameters('ADLSSinkKeyVaultName'), parameters('DataFactoryName'), resourceGroup().id)))]",
      "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
      "apiVersion": "2022-04-01",
      "properties": {
        "principalId": "[reference(variables('dataFactoryAppResourceId'), '2018-06-01', 'Full').identity.principalId]",
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
      ]
    },
    // Add Azure Data Factory Resource
    {
      "apiVersion": "2018-06-01",
      "comments": "Creates the ADF pipeline that copies data from O365 to the newly created destination ADLS.",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('destinationAdlsAccountName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "East US 2",
      "name": "[parameters('DataFactoryName')]",
      "resources": [
        {
          "name": "[concat(parameters('DataFactoryName'), '/AzureSelfHosted')]",
          "type": "Microsoft.DataFactory/factories/integrationRuntimes",
          "apiVersion": "2018-06-01",
          "properties": {
            "type": "Managed",
            "typeProperties": {
              "computeProperties": {
                "location": "East US 2",
                "dataFlowProperties": {
                  "computeType": "General",
                  "coreCount": 8,
                  "timeToLive": 10
                }
              }
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Define Partner ADLS sink
        {
          "name": "[concat(parameters('DataFactoryName'), '/ADLSSink')]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureBlobFS",
            "typeProperties": {
              "url": "[concat('https://', variables('destinationAdlsAccountName'), '.dfs.core.windows.net/')]",
              "tenant": "[subscription().tenantId]",
              "servicePrincipalId": "[parameters('AppId')]",
              "servicePrincipalCredentialType": "ServicePrincipalKey",
              "servicePrincipalCredential": {
                "type": "AzureKeyVaultSecret",
                "secretName": "[parameters('ADLSSinkSecretName')]",
                "secretVersion": "",
                "store": {
                  "referenceName": "[variables('adlsSinkKeyVaultLink')]",
                  "type": "LinkedServiceReference"
                }
              }
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]",
            "[resourceId('Microsoft.Resources/deploymentScripts', 'ApplicationScript')]",
            "[variables('adlsSinkKeyVaultLink')]"
          ]
        },
        // Define KV Link For Service Principal Secret
        {
          "name": "[concat(parameters('DataFactoryName'), '/', variables('adlsSinkKeyVaultLink'))]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureKeyVault",
            "typeProperties": {
              "baseUrl": "[concat('https://', parameters('ADLSSinkKeyVaultName'), '.vault.azure.net/')]"
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Sink for Viva Insights data output in partner tenant
        {
          "name": "[concat(parameters('DataFactoryName'), '/VivaInsightsSink')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "ADLSSink",
              "type": "LinkedServiceReference"
            },
            "parameters": {
              "AzureActiveDirectoryTenantId": {
                "type": "string",
                "defaultValue": "[parameters('AzureActiveDirectoryTenantId')]"
              }
            },
            "annotations": [],
            "type": "Binary",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "folderPath": {
                  "value": "@concat(pipeline().RunId, '/VivaInsights/', dataset().AzureActiveDirectoryTenantId)",
                  "type": "Expression"
                },
                "fileSystem": "datasets"
              }
            }
          },
          "dependsOn": [
            "ADLSSink",
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Sink for AAD User data output in partner tenant
        {
          "name": "[concat(parameters('DataFactoryName'), '/AADUserSink')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "ADLSSink",
              "type": "LinkedServiceReference"
            },
            "parameters": {
              "AzureActiveDirectoryTenantId": {
                "type": "string",
                "defaultValue": "[parameters('AzureActiveDirectoryTenantId')]"
              }
            },
            "annotations": [],
            "type": "Binary",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "folderPath": {
                  "value": "@concat(pipeline().RunId, '/AADUser/', dataset().AzureActiveDirectoryTenantId)",
                  "type": "Expression"
                },
                "fileSystem": "datasets"
              }
            }
          },
          "dependsOn": [
            "ADLSSink",
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Define O365 source linked service (this will be using MGDC)
        {
          "name": "[concat(parameters('DataFactoryName'), '/Office365Service')]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "Office365",
            "typeProperties": {
              "office365TenantId": "[parameters('AzureActiveDirectoryTenantId')]",
              "servicePrincipalTenantId": "[subscription().tenantId]",
              "servicePrincipalId": "[parameters('AppId')]",
              "servicePrincipalKey": {
                "type": "SecureString",
                "value": "[parameters('AppSecret')]"
              }
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Define the O365 source dataset to extract by MGDC
        {
          "name": "[concat(parameters('DataFactoryName'), '/Office365DataSet', variables('datasetName'))]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "Office365Service",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "parameters": {
              "RequestStartDate": {
                "type": "string"
              },
              "RequestEndDate": {
                "type": "string"
              },
              "AggregationType": {
                "type": "string"
              }
            },
            "type": "Office365Table",
            "structure": [
              {
                "name": "After-hours collaboration hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "After-hours email hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "After-hours chat hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "After-hours meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "After-hours scheduled call hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "After-hours unscheduled call hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Collaboration hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Email hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "External collaboration hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Chat hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Scheduled call hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Unscheduled call hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Conflicting meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Meetings with manager 1:1",
                "type": "double",
                "description": " "
              },
              {
                "name": "IsActive",
                "type": "boolean",
                "description": " "
              },
              {
                "name": "MetricDate",
                "type": "datetime",
                "description": "The date and time the message was created."
              },
              {
                "name": "After-hours call hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Call hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Multitasking hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Emails sent",
                "type": "double",
                "description": " "
              },
              {
                "name": "Meetings",
                "type": "double",
                "description": " "
              },
              {
                "name": "Chats sent",
                "type": "double",
                "description": " "
              },
              {
                "name": "Calls",
                "type": "double",
                "description": " "
              },
              {
                "name": "Meeting and call hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Weekend emails sent",
                "type": "double",
                "description": " "
              },
              {
                "name": "Weekend chats sent",
                "type": "double",
                "description": " "
              },
              {
                "name": "Weekend meetings",
                "type": "double",
                "description": " "
              },
              {
                "name": "Unscheduled weekend calls",
                "type": "double",
                "description": " "
              },
              {
                "name": "Urgent email hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Urgent meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Small-group meeting call and chat hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Small-group emails sent excluding manager",
                "type": "double",
                "description": " "
              },
              {
                "name": "Small-group chats sent excluding manager",
                "type": "double",
                "description": " "
              },
              {
                "name": "Internal meeting hours with 3 to 8 attendees",
                "type": "double",
                "description": " "
              },
              {
                "name": "Internal meeting hours without manager 1:1",
                "type": "double",
                "description": " "
              },
              {
                "name": "Unscheduled call hours with manager 1:1",
                "type": "double",
                "description": " "
              },
              {
                "name": "Unscheduled call hours with manager",
                "type": "double",
                "description": " "
              },
              {
                "name": "Collaboration hours with direct reports",
                "type": "double",
                "description": " "
              },
              {
                "name": "Small-group emails sent including manager",
                "type": "double",
                "description": " "
              },
              {
                "name": "Small-group chats sent including manager",
                "type": "double",
                "description": " "
              },
              {
                "name": "Manager coaching hours 1:1",
                "type": "double",
                "description": " "
              },
              {
                "name": "Meeting hours with manager",
                "type": "double",
                "description": " "
              },
              {
                "name": "Meeting hours with manager 1:1",
                "type": "double",
                "description": " "
              },
              {
                "name": "Meetings with manager",
                "type": "double",
                "description": " "
              },
              {
                "name": "Meetings with skip level",
                "type": "double",
                "description": " "
              },
              {
                "name": "Meeting hours with skip level",
                "type": "double",
                "description": " "
              },
              {
                "name": "Internal network size",
                "type": "double",
                "description": " "
              },
              {
                "name": "External unscheduled call hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "External email hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "External chat hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "External meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Available-to-focus hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Uninterrupted hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Interrupted hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Small and short meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Small and short recurring meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Large and long meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Large and long recurring meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Large and short meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Large and short recurring meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Small and long meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Small and long recurring meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Recurring meeting hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Working-hours collaboration hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Working-hours email hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Working-hours call hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Working-hours chat hours",
                "type": "double",
                "description": " "
              },
              {
                "name": "Working-hours meeting hours",
                "type": "double",
                "description": " "
              }
            ],
            "typeProperties": {
              "tableName": "[variables('datasetName')]",
              "dateFilterColumn": "MetricDate",
              "startTime": "@dataset().RequestStartDate",
              "endTime": "@dataset().RequestEndDate",
              "AdditionalDataSetProperties": {
                "aggregationType": "@dataset().AggregationType"
              }
            }
          },
          "dependsOn": [
            "Office365Service",
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // OPTIONAL: Define the O365 source dataset to extract AAD user directory information
        {
          "name": "[concat(parameters('DataFactoryName'), '/Office365DataSetUser_V1')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "Office365Service",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "type": "Office365Table",
            "schema": [],
            "typeProperties": {
              "tableName": "BasicDataSet_v0.User_v1"
            }
          },
          "dependsOn": [
            "Office365Service",
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Define a pipeline to export the events from Customer O365 tenant to Partner's Azure storage.
        {
          "name": "[concat(parameters('DataFactoryName'), '/ExportO365DataEvents')]",
          "type": "Microsoft.DataFactory/factories/pipelines",
          "apiVersion": "2018-06-01",
          "properties": {
            "activities": [
              {
                "name": "Copy Viva Insights Data",
                "type": "Copy",
                "dependsOn": [

                ],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [

                ],
                "typeProperties": {
                  "source": {
                    "type": "Office365Source"
                  },
                  "sink": {
                    "type": "BinarySink",
                    "storeSettings": {
                      "type": "AzureBlobFSWriteSettings"
                    }
                  },
                  "enableStaging": false
                },
                "inputs": [
                  {
                    "referenceName": "[concat('Office365DataSet', variables('datasetName'))]",
                    "type": "DatasetReference",
                    "parameters": {
                      "RequestStartDate": "@if(empty(pipeline().parameters.RequestStartDate), subtractFromTime(pipeline().TriggerTime, pipeline().parameters.DefaultLookbackWindowDays, 'Day'), pipeline().parameters.RequestStartDate)",
                      "RequestEndDate": "@if(empty(pipeline().parameters.RequestEndDate), pipeline().TriggerTime, pipeline().parameters.RequestEndDate)",
                      "AggregationType": "@pipeline().parameters.AggregationType"
                    }
                  }
                ],
                "outputs": [
                  {
                    "referenceName": "VivaInsightsSink",
                    "type": "DatasetReference",
                    "parameters": {}
                  }
                ]
              },
              // OPTIONAL: Step to export AAD user information in the customer tenant, if this is required for your application to join with the output.
              {
                "name": "Copy AAD User Data",
                "type": "Copy",
                "dependsOn": [],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "source": {
                    "type": "Office365Source",
                    "outputColumns": [
                      {
                        "name": "aboutMe"
                      },
                      {
                        "name": "accountEnabled"
                      },
                      {
                        "name": "ageGroup"
                      },
                      {
                        "name": "assignedLicenses"
                      },
                      {
                        "name": "assignedPlans"
                      },
                      {
                        "name": "birthday"
                      },
                      {
                        "name": "businessPhones"
                      },
                      {
                        "name": "city"
                      },
                      {
                        "name": "companyName"
                      },
                      {
                        "name": "consentProvidedForMinor"
                      },
                      {
                        "name": "country"
                      },
                      {
                        "name": "createdDateTime"
                      },
                      {
                        "name": "department"
                      },
                      {
                        "name": "displayName"
                      },
                      {
                        "name": "givenName"
                      },
                      {
                        "name": "hireDate"
                      },
                      {
                        "name": "id"
                      },
                      {
                        "name": "imAddresses"
                      },
                      {
                        "name": "interests"
                      },
                      {
                        "name": "jobTitle"
                      },
                      {
                        "name": "legalAgeGroupClassification"
                      },
                      {
                        "name": "mail"
                      },
                      {
                        "name": "mailNickname"
                      },
                      {
                        "name": "mobilePhone"
                      },
                      {
                        "name": "mySite"
                      },
                      {
                        "name": "officeLocation"
                      },
                      {
                        "name": "onPremisesImmutableId"
                      },
                      {
                        "name": "onPremisesLastSyncDateTime"
                      },
                      {
                        "name": "onPremisesSecurityIdentifier"
                      },
                      {
                        "name": "onPremisesSyncEnabled"
                      },
                      {
                        "name": "passwordPolicies"
                      },
                      {
                        "name": "pastProjects"
                      },
                      {
                        "name": "postalCode"
                      },
                      {
                        "name": "preferredLanguage"
                      },
                      {
                        "name": "preferredName"
                      },
                      {
                        "name": "provisionedPlans"
                      },
                      {
                        "name": "proxyAddresses"
                      },
                      {
                        "name": "responsibilities"
                      },
                      {
                        "name": "schools"
                      },
                      {
                        "name": "skills"
                      },
                      {
                        "name": "state"
                      },
                      {
                        "name": "streetAddress"
                      },
                      {
                        "name": "surname"
                      },
                      {
                        "name": "usageLocation"
                      },
                      {
                        "name": "userPrincipalName"
                      },
                      {
                        "name": "userType"
                      }
                    ]
                  },
                  "sink": {
                    "type": "BinarySink",
                    "storeSettings": {
                      "type": "AzureBlobFSWriteSettings"
                    }
                  },
                  "enableStaging": false
                },
                "inputs": [
                  {
                    "referenceName": "Office365DataSetUser_V1",
                    "type": "DatasetReference",
                    "parameters": {}
                  }
                ],
                "outputs": [
                  {
                    "referenceName": "AADUserSink",
                    "type": "DatasetReference",
                    "parameters": {}
                  }
                ]
              }
            ],
            "parameters": {
              "RequestStartDate": {
                "type": "string"
              },
              "RequestEndDate": {
                "type": "string"
              },
              "DefaultLookbackWindowDays": {
                "type": "int",
                "defaultValue": 14
              },
              "AggregationType": {
                "type": "string",
                "defaultValue": "Week"
              }
            },
            "annotations": []
          },
          "dependsOn": [
            "[concat('Office365DataSet', variables('datasetName'))]",
            "VivaInsightsSink",
            "AADUserSink",
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        }
      ],
      "type": "Microsoft.DataFactory/factories"
    },
    // Add a trigger that runs the pipeline once a week
    {
      "name": "[concat(parameters('DataFactoryName'), '/ScheduledTrigger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Runs the pipeline once a week.",
        "annotations": [],
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "ExportO365DataEvents",
              "type": "PipelineReference"
            },
            "parameters": {}
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 7,
            "startTime": "2021-10-08T18:04:00Z",
            "endTime": "2021-10-11T18:04:00Z",
            "timeZone": "UTC",
            "schedule": {}
          }
        }
      },
      "dependsOn": [
        "[concat(resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName')), '/pipelines/ExportO365DataEvents')]"
      ]
    }
  ]
}
