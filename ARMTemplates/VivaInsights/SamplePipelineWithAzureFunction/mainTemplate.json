{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    // Parameters are values that are configurable by the customer.
    "parameters": {
        "AppId": {
            "type": "string",
            "metadata": {
                "description": "The id of the Azure AD Application that has access to the Customer Azure Storage Account (1st hop)."
            }
        },
        "AppSecret": {
            "type": "securestring",
            "metadata": {
                "description": "The secret for the Azure AD Application that has access to the Customer Azure Storage Account (1st hop). App Secret is required for Microsoft Graph Data Connect (see documentation https://docs.microsoft.com/en-us/graph/data-connect-quickstart?tabs=Microsoft365&tutorial-step=2)."
            }
        },
        "SASUrl": {
          "type": "string",
          "metadata": {
            "description": "Shared Access Signature Url of the Partner destination storage account to store the content to, including the token (2nd hop)."
          }
        }
    },
    // Variables can apply functions to parameters or be hardcoded values.
    "variables": {
        // Name to give the Azure Data Factory pipeline created by the ARM template
        "factoryName": "[concat('M365-', uniqueString(resourceGroup().id))]",
        // Name given to the storage account created in the Customer subscription (1st hop)
        "destinationAdlsAccountName": "[concat('astore', uniqueString(resourceGroup().id))]",
        // Name of the container in partner destination store to copy data to. It is required for the Azure Data Factory Blob Storage Linked Service. We extract it from the SAS URL. (2nd hop)
        "destinationContainer": "[split(split(parameters('SASUrl'), '/')[3], '?')[0]]",
        // The name of the final JSON file in partner destination store to copy data to (2nd hop)
        "destinationFileName": "[concat(split(parameters('SASUrl'), '?')[0], '/', concat(uniqueString(resourceGroup().id), '.json?'), split(parameters('SASUrl'), '?')[1])]",
        "functionAppName": "[concat('functionApp', uniqueString(resourceGroup().id))]",
        "packageURL": "https://github.com/niblak/dataconnect-solutions/raw/vivaarmtemplates/ARMTemplates/VivaInsights/SamplePipelineWithAzureFunction/FunctionContent.zip",
        "serverFarmExternalId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('AppServicePlanName'))]",
        "AppServicePlanName": "[concat('ASP-', uniqueString(resourceGroup().id))]",
        "functionStorageName": "[concat('fctstor', uniqueString(resourceGroup().id))]",
        "datasetName": "VivaInsightsDataset_v0"
    },
    "resources": [
        // Script to get the service principal from an app registration in the Customer subscription. Written by MGDC team.
        {
            "apiVersion": "2020-10-01",
            "kind": "AzurePowerShell",
            "location": "[resourceGroup().location]",
            "name": "ApplicationScript",
            "properties": {
                "forceUpdateTag": "1",
                "azPowerShellVersion": "8.0",
                "environmentVariables": [{
                        "name": "AppSecret",
                        "secureValue": "[parameters('AppSecret')]"
                    }
                ],
                "arguments": "[format(' -AppID {0} -TenantId {1} -AppToGet {2}', parameters('AppId'), subscription().tenantId, parameters('AppId'))]",
                "primaryScriptUri": "https://raw.githubusercontent.com/niblak/dataconnect-solutions/vivaarmtemplates/ARMTemplates/SupportScripts/GetServicePricipalId.ps1",
                "timeout": "PT30M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "dependsOn": []
            },
            "type": "Microsoft.Resources/deploymentScripts"
        },
        // Storage account in Customer subscription (1st hop)
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-01-01",
            "name": "[variables('destinationAdlsAccountName')]",
            "location": "eastus2",
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "isHnsEnabled": false,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        // Create a blob service resource (needed for blob operations) in the Customer storage account (1st hop)
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2021-01-01",
            "name": "[concat(variables('destinationAdlsAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('destinationAdlsAccountName'))]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        // Create a container in the Customer storage account (1st hop)
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-01-01",
            "name": "[concat(variables('destinationAdlsAccountName'), '/default/datasets')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('destinationAdlsAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('destinationAdlsAccountName'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "Container"
            }
        },
        // Add Contributor role assignment to the Customer storage account container (1st hop)
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('destinationAdlsAccountName'), 'default', 'datasets')]"
            ],
            "name": "[concat(variables('destinationAdlsAccountName'),'/Microsoft.Authorization/',guid(resourceGroup().id))]",
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference('ApplicationScript').outputs.PrincipalId]"
            }
        },
        // Add Storage Blob Data Contributor role assignment to the Customer storage account container (1st hop)
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers/providers/roleAssignments",
            "apiVersion": "2018-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('destinationAdlsAccountName'), 'default', 'datasets')]"
            ],
            "name": "[concat(variables('destinationAdlsAccountName'), '/default/datasets/Microsoft.Authorization/', guid(concat('blobdatacontributor', resourceGroup().id)))]",
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[reference('ApplicationScript').outputs.PrincipalId]"
            }
        },
        // Add Azure Data Factory Resource
        {
            "name": "[variables('factoryName')]",
            "apiVersion": "2018-06-01",
            "type": "Microsoft.DataFactory/factories",
            "comments": "Creates the ADF pipeline that copies data from O365 to the newly created destination ADLS.",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/', variables('destinationAdlsAccountName'))]"
            ],
            "location": "East US 2",
            "resources": [{
                    "name": "[concat(variables('factoryName'), '/AzureSelfHosted')]",
                    "type": "Microsoft.DataFactory/factories/integrationRuntimes",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "type": "Managed",
                        "typeProperties": {
                            "computeProperties": {
                                "location": "East US 2",
                                "dataFlowProperties": {
                                    "computeType": "General",
                                    "coreCount": 8,
                                    "timeToLive": 10
                                }
                            }
                        }
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                },
                // Define Customer ADLS sink (1st hop)
                {
                    "name": "[concat(variables('factoryName'), '/ADLSSink')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureBlobFS",
                        "typeProperties": {
                            "url": "[concat('https://', variables('destinationAdlsAccountName'), '.dfs.core.windows.net/')]",
                            "tenant": "[subscription().tenantId]",
                            "servicePrincipalId": "[parameters('AppId')]",
                            "servicePrincipalCredentialType": "ServicePrincipalKey",
                            "servicePrincipalCredential": {
                                "type": "SecureString",
                                "value": "[parameters('AppSecret')]"
                            }
                        }
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]",
                        "[resourceId('Microsoft.Resources/deploymentScripts', 'ApplicationScript')]"
                    ]
                },
                // Sink for Viva Insights data output in customer tenant (1st hop)
                {
                    "name": "[concat(variables('factoryName'), '/VivaInsightsSink')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "ADLSSink",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "Binary",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobFSLocation",
                                "folderPath": {
                                    "value": "@concat(pipeline().RunId, '/VivaInsights')",
                                    "type": "Expression"
                                },
                                "fileSystem": "datasets"
                            }
                        }
                    },
                    "dependsOn": [
                        "ADLSSink",
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                },
                // Sink for AAD User data output in customer tenant (1st hop)
                {
                    "name": "[concat(variables('factoryName'), '/AADUserSink')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "ADLSSink",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "Binary",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobFSLocation",
                                "folderPath": {
                                    "value": "@concat(pipeline().RunId, '/AADUser')",
                                    "type": "Expression"
                                },
                                "fileSystem": "datasets"
                            }
                        }
                    },
                    "dependsOn": [
                        "ADLSSink",
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                },
                // Define O365 source linked service (1st hop - this will be using MGDC)
                {
                    "name": "[concat(variables('factoryName'), '/Office365Service')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "Office365",
                        "typeProperties": {
                            "office365TenantId": "[subscription().tenantId]",
                            "servicePrincipalTenantId": "[subscription().tenantId]",
                            "servicePrincipalId": "[parameters('AppId')]",
                            "servicePrincipalKey": {
                                "type": "SecureString",
                                "value": "[parameters('AppSecret')]"
                            }
                        }
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                },
                // Define the O365 source dataset to extract by MGDC (1st hop)
                {
                    "name": "[concat(variables('factoryName'), '/Office365DataSet', variables('datasetName'))]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "Office365Service",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "Office365Table",
                        "structure": [{
                                "name": "AfterHoursCollaboration",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "AfterHoursCollaborationEmails",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "AfterHoursCollaborationInstantMessages",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "AfterHoursCollaborationMeetings",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "AfterHoursCollaborationScheduledCalls",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "AfterHoursCollaborationAdhocCalls",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "CollaborationHours",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "CollaborationHoursEmails",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "CollaborationHoursExternal",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "CollaborationHoursInstantMessages",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "CollaborationHoursMeetings",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "CollaborationHoursScheduledCalls",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "CollaborationHoursAdhocCalls",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "ConflictingMeetingHours",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "OneOnOneMeetingHours",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "SkipLevelMeetingHours",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "TotalFocusHours",
                                "type": "double",
                                "description": " "
                            }, {
                                "name": "IsActive",
                                "type": "boolean",
                                "description": " "
                            }, {
                                "name": "MetricDate",
                                "type": "DateTime",
                                "description": " "
                            }
                        ],
                        "typeProperties": {
                            "tableName": "[variables('datasetName')]",
                            "ScenarioDescription": "Your Application Name (Application ID: 00000000-0000-0000-0000-000000000000)"
                        }
                    },
                    "dependsOn": [
                        "Office365Service",
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                },
                // OPTIONAL: Define the O365 source dataset to extract AAD user directory information
                {
                    "name": "[concat(variables('factoryName'), '/Office365DataSetUser_V1')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "Office365Service",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "Office365Table",
                        "schema": [],
                        "typeProperties": {
                            "tableName": "BasicDataSet_v0.User_v1"
                        }
                    },
                    "dependsOn": [
                        "Office365Service",
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                },
                // Define the Partner destination blob storage linked service (2nd hop)
                {
                    "name": "[concat(variables('factoryName'), '/DestinationBlobStorage')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureBlobStorage",
                        "typeProperties": {
                            "sasUri": "[variables('destinationFileName')]"
                        }
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                },
                // Define the Partner destination container dataset for AAD user data (2nd hop)
                {
                    "name": "[concat(variables('factoryName'), '/AADUserDestinationBinary')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "DestinationBlobStorage",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "Binary",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "folderPath": {
                                    "value": "@concat(pipeline().RunId, '/AADUser')",
                                    "type": "Expression"
                                },
                                "container": "[variables('destinationContainer')]"
                            }
                        }
                    },
                    "dependsOn": [
                        "DestinationBlobStorage",
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                },
                // Define the Partner destination container dataset for Viva Insights data (2nd hop)
                {
                    "name": "[concat(variables('factoryName'), '/VivaInsightsDestinationBinary')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "DestinationBlobStorage",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "Binary",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "folderPath": {
                                    "value": "@concat(pipeline().RunId, '/VivaInsights')",
                                    "type": "Expression"
                                },
                                "container": "destination"
                            }
                        }
                    },
                    "dependsOn": [
                        "DestinationBlobStorage",
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                },
                // Define a pipeline to export the events from O365 to Customer using MGDC (1st hop), then Customer to Partner (2nd hop)
                {
                    "name": "[concat(variables('factoryName'), '/ExportO365DataEvents')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "activities": [{
                                "name": "Copy Viva Insights Data",
                                "type": "Copy",
                                "dependsOn": [

                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [

                                ],
                                "typeProperties": {
                                    "source": {
                                        "type": "Office365Source"
                                    },
                                    "sink": {
                                        "type": "BinarySink",
                                        "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [{
                                        "referenceName": "[concat('Office365DataSet', variables('datasetName'))]",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [{
                                        "referenceName": "VivaInsightsSink",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            // OPTIONAL: Step to export AAD user information in the customer tenant, if this is required for your application to join with the output.
                            {
                                "name": "Copy AAD User Data",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "Office365Source",
                                        "outputColumns": [{
                                                "name": "aboutMe"
                                            }, {
                                                "name": "accountEnabled"
                                            }, {
                                                "name": "ageGroup"
                                            }, {
                                                "name": "assignedLicenses"
                                            }, {
                                                "name": "assignedPlans"
                                            }, {
                                                "name": "birthday"
                                            }, {
                                                "name": "businessPhones"
                                            }, {
                                                "name": "city"
                                            }, {
                                                "name": "companyName"
                                            }, {
                                                "name": "consentProvidedForMinor"
                                            }, {
                                                "name": "country"
                                            }, {
                                                "name": "createdDateTime"
                                            }, {
                                                "name": "department"
                                            }, {
                                                "name": "displayName"
                                            }, {
                                                "name": "givenName"
                                            }, {
                                                "name": "hireDate"
                                            }, {
                                                "name": "id"
                                            }, {
                                                "name": "imAddresses"
                                            }, {
                                                "name": "interests"
                                            }, {
                                                "name": "jobTitle"
                                            }, {
                                                "name": "legalAgeGroupClassification"
                                            }, {
                                                "name": "mail"
                                            }, {
                                                "name": "mailNickname"
                                            }, {
                                                "name": "mobilePhone"
                                            }, {
                                                "name": "mySite"
                                            }, {
                                                "name": "officeLocation"
                                            }, {
                                                "name": "onPremisesImmutableId"
                                            }, {
                                                "name": "onPremisesLastSyncDateTime"
                                            }, {
                                                "name": "onPremisesSecurityIdentifier"
                                            }, {
                                                "name": "onPremisesSyncEnabled"
                                            }, {
                                                "name": "passwordPolicies"
                                            }, {
                                                "name": "pastProjects"
                                            }, {
                                                "name": "postalCode"
                                            }, {
                                                "name": "preferredLanguage"
                                            }, {
                                                "name": "preferredName"
                                            }, {
                                                "name": "provisionedPlans"
                                            }, {
                                                "name": "proxyAddresses"
                                            }, {
                                                "name": "responsibilities"
                                            }, {
                                                "name": "schools"
                                            }, {
                                                "name": "skills"
                                            }, {
                                                "name": "state"
                                            }, {
                                                "name": "streetAddress"
                                            }, {
                                                "name": "surname"
                                            }, {
                                                "name": "usageLocation"
                                            }, {
                                                "name": "userPrincipalName"
                                            }, {
                                                "name": "userType"
                                            }
                                        ]
                                    },
                                    "sink": {
                                        "type": "BinarySink",
                                        "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [{
                                        "referenceName": "Office365DataSetUser_V1",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [{
                                        "referenceName": "AADUserSink",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            }, {
                                "name": "Export AAD User Data",
                                "type": "Copy",
                                "dependsOn": [{
                                        "activity": "Copy AAD User Data",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "BinarySource",
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "BinarySink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [{
                                        "referenceName": "AADUserSink",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [{
                                        "referenceName": "AADUserDestinationBinary",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            }, {
                                "name": "Delete AAD User Data",
                                "type": "Delete",
                                "dependsOn": [{
                                        "activity": "Export AAD User Data",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "AADUserSink",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "enableLogging": false,
                                    "storeSettings": {
                                        "type": "AzureBlobFSReadSettings",
                                        "recursive": true,
                                        "enablePartitionDiscovery": false
                                    }
                                }
                            }, {
                                "name": "Delete Viva Insights Data",
                                "type": "Delete",
                                "dependsOn": [{
                                        "activity": "Export Viva Insights Data",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "VivaInsightsSink",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "enableLogging": false,
                                    "storeSettings": {
                                        "type": "AzureBlobFSReadSettings",
                                        "recursive": true,
                                        "enablePartitionDiscovery": false
                                    }
                                }
                            }, {
                                "name": "Export Viva Insights Data",
                                "type": "Copy",
                                "dependsOn": [{
                                        "activity": "Copy Viva Insights Data",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "BinarySource",
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "BinarySink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [{
                                        "referenceName": "VivaInsightsSink",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [{
                                        "referenceName": "VivaInsightsDestinationBinary",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            }
                        ],
                        "annotations": []
                    },
                    "dependsOn": [
                        "[concat('Office365DataSet', variables('datasetName'))]",
                        "VivaInsightsSink",
                        "AADUserSink",
                        "AADUserDestinationBinary",
                        "VivaInsightsDestinationBinary",
                        "[resourceId('Microsoft.DataFactory/factories', variables('factoryName'))]"
                    ]
                }
            ]
        },
        // Add a trigger that runs the pipeline once a week
        {
            "name": "[concat(variables('factoryName'), '/ScheduledTrigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Runs the pipeline once a week.",
                "annotations": [],
                "pipelines": [{
                        "pipelineReference": {
                            "referenceName": "ExportO365DataEvents",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 7,
                        "startTime": "2021-10-08T18:04:00Z",
                        "endTime": "2021-10-11T18:04:00Z",
                        "timeZone": "UTC",
                        "schedule": {}
                    }
                }
            },
            "dependsOn": [
                "[concat(resourceId('Microsoft.DataFactory/factories', variables('factoryName')), '/pipelines/ExportO365DataEvents')]"
            ]
        }, {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('functionStorageName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "Standard_LRS"
            }
        }, {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "name": "[variables('AppServicePlanName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "F1",
                "tier": "Free",
                "size": "F1",
                "family": "F",
                "capacity": 0
            },
            "kind": "app",
            "properties": {
                "perSiteScaling": false,
                "elasticScaleEnabled": false,
                "maximumElasticWorkerCount": 1,
                "isSpot": false,
                "reserved": false,
                "isXenon": false,
                "hyperV": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0,
                "zoneRedundant": false
            }
        }, {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-03-01",
            "name": "[variables('functionAppName')]",
            "location": "[resourceGroup().location]",
            "kind": "functionapp",
            "properties": {
                "serverFarmId": "[variables('serverFarmExternalId')]",
                "siteConfig": {
                    "appSettings": [{
                            "name": "TriggerStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('destinationAdlsAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('destinationAdlsAccountName')), '2015-05-01-preview').key1)]"
                        }, {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('functionStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageName')), '2015-05-01-preview').key1)]"
                        }
                    ]
                }
            },
            "resources": [{
                    "name": "MSDeploy",
                    "type": "extensions",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2021-03-01",
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', variables('functionAppName'))]"
                    ],
                    "properties": {
                        "packageUri": "[variables('packageURL')]"
                    }
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms',variables('AppServicePlanName'))]"
            ]
        }
    ]
}
